CREATE OR REPLACE PROCEDURE proc_rider_avg_delivery_time(IN_Year IN VARCHAR,
                                                                IN_Month IN VARCHAR,
                                                                IN_BaseTime IN VARCHAR)
IS
    v_count             NUMBER := 0;

    v_topRiderTimeID    VARCHAR(10);
    v_topRiderTime      VARCHAR(50);
    v_topTime           NUMBER := 0;

    v_topRiderOrdersID  VARCHAR(10);
    v_topRiderOrders    VARCHAR(50);
    v_topOrders         NUMBER := 0;

    v_pageCount         NUMBER := 1;
    V_loop              NUMBER := 0;
    e_invalidInput      EXCEPTION;
    e_invalidYear       EXCEPTION;
    e_invalidMonth      EXCEPTION;

    CURSOR Report_Cursor IS
        SELECT CONCAT('R', r.riderId) AS riderId, r.riderName,
            COUNT(o.orderId) AS Total_Orders_Delivered,
            ROUND(AVG((o.receivedTime - o.estimatedTime)*24*60)) as AvgTimeTaken
        FROM   orders o,
            riders r
        WHERE  o.riderId = r.riderId AND
            EXTRACT(YEAR FROM o.orderDate) = IN_Year AND 
            EXTRACT(MONTH FROM o.orderDate) = IN_Month
        GROUP BY r.riderId, r.riderName
        HAVING ROUND(AVG((o.receivedTime - o.estimatedTime)*24*60)) < IN_BaseTime
        ORDER BY AvgTimeTaken;

    Report_rec Report_Cursor%ROWTYPE;

BEGIN
    -- Verify Input
    IF ((IS_NUMBER(IN_Year) = 0) OR (IS_NUMBER(IN_Month) = 0) OR (IS_NUMBER(IN_BaseTime) = 0)) THEN
        raise e_invalidInput;
    ELSE
        IF (IN_Year > TO_CHAR(sysdate,'yyyy')) THEN
            raise e_invalidYear;
        ELSE
            IF( (IN_Month < 1) OR (IN_Month > 12)) THEN
                raise e_invalidMonth;
            END IF;
        END IF;
    END IF;

    DBMS_OUTPUT.PUT_LINE(chr(10));
    DBMS_OUTPUT.PUT_LINE(chr(13)|| LPAD(' ',48,' ') ||'ON-DEMAND REPORT');
    DBMS_OUTPUT.PUT_LINE(chr(13)|| LPAD(' ',12,' ') ||'RIDERS PERFORMANCE REPORT - AVERAGE DELIVERY TIME ON YEAR '||
                            IN_Year || ' ' || TO_CHAR(TO_DATE(IN_Month, 'MM'), 'MONTH') ||
                            '(WITHIN ' || IN_BaseTime || ' MINUTES)' );
    DBMS_OUTPUT.PUT_LINE(chr(13)|| LPAD(' ',12,' ') || LPAD('=',90,'='));

    -- OPEN QUERY 
    OPEN Report_Cursor;
    LOOP
    FETCH Report_Cursor into Report_rec;        -- FETCH RECORDS
    EXIT WHEN Report_Cursor%NOTFOUND;

        -- PRINT PAGES BY PAGES
        IF(v_loop = 0 OR v_loop = 20) THEN
            DBMS_OUTPUT.PUT_LINE(' ');
            DBMS_OUTPUT.PUT_LINE(RPAD('Printed Date: ', 14, ' ')||
                                RPAD(TO_CHAR(sysdate,'dd/mm/yyyy'), 10, ' ')||
                                LPAD(' ', 70, ' ')||
                                'Page: '||LPAD(v_pageCount, 2, ' '));

            -- COLUMNS HEADERS
            DBMS_OUTPUT.PUT_LINE(' ');
            DBMS_OUTPUT.PUT_LINE(RPAD('Rider ID', 9, ' ')||
                                    RPAD('Rider Name', 45, ' ')||
                                    RPAD(' Total Orders Delivered', 24, ' ') ||
                                    RPAD('Average Delivery Time (Minutes)', 35,' '));
            -- COLUMNS SEPERATOR 
            DBMS_OUTPUT.PUT_LINE(RPAD('=', 8 ,'=')||' '||
                                    RPAD('=', 45 ,'=')||' '||
                                    LPAD('=', 22 ,'=')||' '||
                                    LPAD('=', 31 ,'=')||' ');
            v_loop := 0;
            v_pageCount := v_pageCount + 1;
        END IF;

        -- PRINT RECORD
        DBMS_OUTPUT.PUT_LINE( RPAD(Report_rec.riderId, 9, ' ')|| 
                                RPAD(Report_rec.riderName , 45, ' ') || 
                                LPAD(Report_rec.Total_Orders_Delivered , 22, ' ') || 
                                LPAD(Report_rec.AvgTimeTaken, 31,' '));

        -- SUMMARY

        IF v_count = 0 THEN
            v_topRiderTimeID := Report_rec.riderId;
            v_topRiderTime := Report_rec.riderName;
            v_topTime := Report_rec.AvgTimeTaken;
        END IF;

        IF Report_rec.Total_Orders_Delivered > v_topOrders THEN
            v_topOrders := Report_rec.Total_Orders_Delivered;
            v_topRiderOrdersID := Report_rec.riderId;
            v_topRiderOrders := Report_rec.riderName;
        END IF;


        v_loop := v_loop + 1;
                v_count := v_count + 1;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(LPAD(' ',9,'*')||LPAD(' ',46,'*')||LPAD(' ',24,'*')||LPAD(' ',30,'*'));
    DBMS_OUTPUT.PUT_LINE('SUMMARY');
    DBMS_OUTPUT.PUT_LINE('=======');
    DBMS_OUTPUT.PUT_LINE('**Most efficeint rider was '|| v_topRiderTime || '('||v_topRiderTimeID ||')'|| 
                         ' has a average delivery time of '|| v_topTime || ' minutes');
    DBMS_OUTPUT.PUT_LINE('**Most orders delivered rider was '|| v_topRiderOrders || '('||v_topRiderOrdersID ||')'|| 
                         ' has a average orders delivered of '|| v_topOrders || ' orders');
    DBMS_OUTPUT.PUT_LINE(' ');  
    DBMS_OUTPUT.PUT_LINE(LPAD(' ',9,'*')||LPAD(' ',46,'*')||LPAD(' ',24,'*')||LPAD(' ',30,'*'));
  
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE(chr(13)|| LPAD(' ',45,' ') ||'-END of REPORT-');

    EXCEPTION
        WHEN e_invalidInput THEN
            DBMS_OUTPUT.PUT_LINE('Invalid  Input: Input year must be a numberic.');
        WHEN e_invalidYear THEN
            DBMS_OUTPUT.PUT_LINE('Invalid  Input: Input year cannot be future year.');
        WHEN e_invalidMonth THEN
            DBMS_OUTPUT.PUT_LINE('Invalid  Input: Month format must within number 1-12');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error Found. Please contact your Database Administrator');
END;
/

exec proc_rider_avg_delivery_time(2017,1,9);


