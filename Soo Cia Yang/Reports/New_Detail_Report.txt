CREATE OR REPLACE PROCEDURE proc_riders_earnings_by_location(IN_Year IN VARCHAR)
IS
    v_highestArea       VARCHAR(50);
    v_highestEarnings   NUMBER := 0;
    v_overall_rider     NUMBER := 0;
    v_overall_orders    NUMBER := 0;
    v_overall_earnings  NUMBER := 0;
    v_count             NUMBER := 0;
    v_pageCount         NUMBER := 1;
    V_loop              NUMBER := 0;
    e_invalidInput      EXCEPTION;
    e_invalidYear       EXCEPTION;

    CURSOR Report_Cursor IS
        SELECT r.area, 
                COUNT(r.riderId) Number_Of_Riders, 
                ROUND(AVG(q1.Total_Orders_Delivered_By_Year)) Average_Orders_Delivered, 
                ROUND(AVG(q1.Total_Orders_Delivered_By_Year)) * 15.50 AS Average_Riders_Earnings
        FROM riders r 
            LEFT JOIN 
            (SELECT r.riderId, r.riderName, COUNT(o.orderId) AS Total_Orders_Delivered_By_Year
                FROM orders o, riders r
                WHERE o.riderId = r.riderId AND 
                    EXTRACT(YEAR FROM o.orderDate) = IN_Year
                GROUP BY r.riderId, r.riderName
            ) q1
            ON r.riderId = q1.riderId
        GROUP BY r.area
        ORDER BY Average_Orders_Delivered DESC;

    Report_rec Report_Cursor%ROWTYPE;

BEGIN

    -- Verify Input
    IF (IS_NUMBER(IN_Year) = 0) THEN
        raise e_invalidInput;
    ELSE
        IF (IN_Year > TO_CHAR(sysdate,'yyyy')) THEN
            raise e_invalidYear;
        END IF;
    END IF;

    DBMS_OUTPUT.PUT_LINE(chr(10));
    DBMS_OUTPUT.PUT_LINE(chr(13)|| LPAD(' ',48,' ') ||'DETAIL REPORT');
    DBMS_OUTPUT.PUT_LINE(chr(13)|| LPAD(' ',28,' ') ||'AVERAGE RIDERS'' EARNINGS REPORT BY LOCATION ON YEAR ' || IN_Year);
    DBMS_OUTPUT.PUT_LINE(chr(13)|| LPAD(' ',28,' ') || LPAD('=',56,'='));

    -- OPEN QUERY 
    OPEN Report_Cursor;
    LOOP
    FETCH Report_Cursor into Report_rec;            -- FETCH RECORDS
    EXIT WHEN Report_Cursor%NOTFOUND;

        -- PRINT PAGES BY PAGES - PRINT ONLY IF THE RECORD COUNT IS 0 OR REACHES 20 THEN PRINT NEXT PAGE HEADINGS
        IF(v_loop = 0 OR v_loop = 20) THEN
            DBMS_OUTPUT.PUT_LINE(chr(10));
            DBMS_OUTPUT.PUT_LINE(RPAD('Printed Date: ', 14, ' ')||
                                RPAD(TO_CHAR(sysdate,'dd/mm/yyyy'), 10, ' ')||
                                LPAD(' ', 70, ' ')||
                                'Page: '||LPAD(v_pageCount, 2, ' '));

            -- COLUMNS HEADERS
            DBMS_OUTPUT.PUT_LINE(CHR(10));
            DBMS_OUTPUT.PUT_LINE(RPAD('Area (State)', 30, ' ')||
                                    RPAD('Total Number of Riders', 23, ' ')||
                                    RPAD('Average Orders Delivered', 25, ' ') ||
                                    RPAD('Average Rider Earnings', 25,' '));

            -- COLUMNS SEPERATOR 
            DBMS_OUTPUT.PUT_LINE(RPAD('=', 29 ,'=')||' '||
                                RPAD('=', 22 ,'=')||' '||
                                RPAD('=', 24 ,'=')||' '||
                                RPAD('=', 22 ,'=')||' ');
            v_loop := 0;
            v_pageCount := v_pageCount + 1;
        END IF;


        -- PRINT RECORD
        DBMS_OUTPUT.PUT_LINE( RPAD(Report_rec.area, 25, ' ')|| 
                        LPAD(TO_CHAR(Report_rec.Number_Of_Riders, '99,999') , 26, ' ') || 
                        LPAD(TO_CHAR(Report_rec.Average_Orders_Delivered, '99,999') , 24, ' ') || 
                        LPAD('RM'||TO_CHAR(Report_rec.Average_Riders_Earnings, '9,999.00'), 22,' '));


        -- SUMMARY
        v_overall_rider := v_overall_rider + Report_rec.Number_Of_Riders;
        v_overall_orders := v_overall_orders + Report_rec.Average_Orders_Delivered;
        v_overall_earnings := v_overall_earnings + Report_rec.Average_Riders_Earnings;


        IF v_count = 0 THEN
            v_highestArea := Report_rec.area; 
            v_highestEarnings := Report_rec.Average_Riders_Earnings;
        END IF;

        v_loop := v_loop + 1;
        v_count := v_count + 1;
    END LOOP;

    v_overall_orders := v_overall_orders/ v_count;
    v_overall_earnings := v_overall_earnings/ v_count;


    DBMS_OUTPUT.PUT_LINE(LPAD(' ',30,'*')||LPAD(' ',23,'*')||LPAD(' ',25,'*')||LPAD(' ',22,'*'));

    DBMS_OUTPUT.PUT_LINE(LPAD('Overall Subtotal: ', 30, ' ') || 
                            LPAD(TO_CHAR(v_overall_rider, '99,999'), 21, ' ') || 
                            LPAD(TO_CHAR(v_overall_orders, '99,999'), 24, ' ')  || 
                            LPAD('RM'||TO_CHAR(v_overall_earnings, '9,999.00'), 22, ' ') );

    DBMS_OUTPUT.PUT_LINE(LPAD(' ',30,'*')||LPAD(' ',23,'*')||LPAD(' ',25,'*')||LPAD(' ',22,'*'));
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('Riders in ' || v_highestArea || ' has the highest earnings as compare to others area(state).' || 
                            ' (RM'|| TO_CHAR(v_highestEarnings, '9,999.00') || ')' );

    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE(chr(13)|| LPAD(' ',45,' ') ||'-END of REPORT-');

    EXCEPTION
        WHEN e_invalidInput THEN
            DBMS_OUTPUT.PUT_LINE('Invalid  Input: Input year must be a numberic.');
        WHEN e_invalidYear THEN
            DBMS_OUTPUT.PUT_LINE('Invalid  Input: Input year cannot be future year.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error Found. Please contact your Database Administrator');
END;
/

EXEC  proc_riders_earnings_by_location(2017);


-- Area (State)                   No. of Riders Average Orders Delivered Average Rider Earnings